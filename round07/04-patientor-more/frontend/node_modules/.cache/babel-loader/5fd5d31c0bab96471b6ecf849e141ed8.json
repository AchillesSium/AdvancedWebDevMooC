{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/Tuni/2nd_Semester/Advanced_Web_Front_End/round07/04-patientor-more/frontend/src/your-solution/PatientInfoPage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Icon } from \"semantic-ui-react\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue } from \"../state\"; //import {useParams} from \"react-router-dom\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PatientInfoPage = ({\n  match\n}) => {\n  _s();\n\n  var _patientInfo$entries;\n\n  const id = String(match.params.id);\n  const [, dispatch] = useStateValue();\n  const [patientInfo, setPatientInfo] = React.useState();\n  const [diagnosisInfo, setDiagnosisInfo] = React.useState();\n\n  const getPatientInfo = async id => {\n    try {\n      const {\n        data: patientInfo\n      } = await axios.get(`${apiBaseUrl}/patients/${id}`);\n      setPatientInfo(patientInfo);\n      dispatch({\n        type: \"GET_PATIENT_INFO\",\n        payload: patientInfo\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  void getPatientInfo(id);\n\n  const getDiagnosisInfo = async () => {\n    try {\n      const {\n        data: diagnosisInfo\n      } = await axios.get(`${apiBaseUrl}/diagnoses`);\n      setDiagnosisInfo(diagnosisInfo);\n      dispatch({\n        type: \"GET_DIAGNOSIS_INFO\",\n        payload: diagnosisInfo\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  void getDiagnosisInfo();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [patientInfo === null || patientInfo === void 0 ? void 0 : patientInfo.name, \" \", /*#__PURE__*/_jsxDEV(Icon, {\n        name: patientInfo && patientInfo.gender === 'male' ? 'venus' : 'mars'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), \"ssn: \", patientInfo === null || patientInfo === void 0 ? void 0 : patientInfo.ssn, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 36\n    }, this), \"Occupation: \", patientInfo === null || patientInfo === void 0 ? void 0 : patientInfo.occupation, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 50\n    }, this), \"Date of Birth: \", patientInfo === null || patientInfo === void 0 ? void 0 : patientInfo.dateOfBirth, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 54\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"entries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 40\n    }, this), patientInfo === null || patientInfo === void 0 ? void 0 : (_patientInfo$entries = patientInfo.entries) === null || _patientInfo$entries === void 0 ? void 0 : _patientInfo$entries.map(entry => /*#__PURE__*/_jsxDEV(Entries, {\n      entry: entry,\n      diagnosisInfo: diagnosisInfo\n    }, entry.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 49\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PatientInfoPage, \"x+Flg4zlEFIeSgZQONZhL7AnL8I=\", false, function () {\n  return [useStateValue];\n});\n\n_c = PatientInfoPage;\n\nconst Entries = ({\n  entry,\n  diagnosisInfo\n}) => {\n  const codes = [];\n\n  if (entry.diagnosisCodes !== null) {\n    const diagCodes = entry.diagnosisCodes;\n\n    if (diagCodes && diagCodes.length > 0) {\n      diagCodes.map(code => codes.push(code));\n    }\n  }\n\n  let i = 0;\n\n  const getDiagnosisName = code => {\n    const diagObj = diagnosisInfo.find(diagnosis => diagnosis.code === code);\n\n    if (diagObj) {\n      return diagObj.name;\n    } else {\n      return '';\n    }\n  }; // if(entry.type === 'Hospital'){\n  //     return(\n  //         <div>\n  //             <p>{entry.date} <i>{entry.description}</i></p>\n  //             <ul>\n  //             {codes.map(code => <li key={i++}>{code}</li>)}\n  //             </ul>\n  //         </div>\n  //     );\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [entry.date, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: entry.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: codes.map(code => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [code, \" \", getDiagnosisName(code)]\n      }, i++, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Entries;\nexport default PatientInfoPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PatientInfoPage\");\n$RefreshReg$(_c2, \"Entries\");","map":{"version":3,"sources":["/Users/user/Desktop/Tuni/2nd_Semester/Advanced_Web_Front_End/round07/04-patientor-more/frontend/src/your-solution/PatientInfoPage/index.tsx"],"names":["React","axios","Icon","apiBaseUrl","useStateValue","PatientInfoPage","match","id","String","params","dispatch","patientInfo","setPatientInfo","useState","diagnosisInfo","setDiagnosisInfo","getPatientInfo","data","get","type","payload","e","console","error","getDiagnosisInfo","name","gender","ssn","occupation","dateOfBirth","entries","map","entry","Entries","codes","diagnosisCodes","diagCodes","length","code","push","i","getDiagnosisName","diagObj","find","diagnosis","date","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Patient, Entry, Diagnosis } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue } from \"../state\";\n//import {useParams} from \"react-router-dom\";\n\nconst PatientInfoPage = ({match}: {match: any}) => {\n    const id = String(match.params.id);\n    const [, dispatch] = useStateValue();\n    const [patientInfo, setPatientInfo] = React.useState<Patient>();\n    const [diagnosisInfo, setDiagnosisInfo] = React.useState<Diagnosis>();\n\n    const getPatientInfo = async (id: string) => {\n        try {\n          const { data: patientInfo } = await axios.get<Patient>(\n            `${apiBaseUrl}/patients/${id}`\n          );\n          setPatientInfo(patientInfo);\n          dispatch({ type: \"GET_PATIENT_INFO\", payload: patientInfo});\n          \n        } catch (e) {\n          console.error(e);\n        }\n      };\n      \n      void getPatientInfo(id);\n\n      const getDiagnosisInfo = async () => {\n        try {\n          const { data: diagnosisInfo } = await axios.get<Diagnosis[]>(\n            `${apiBaseUrl}/diagnoses`\n          );\n          setDiagnosisInfo(diagnosisInfo);\n          dispatch({ type: \"GET_DIAGNOSIS_INFO\", payload: diagnosisInfo});\n          \n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      void getDiagnosisInfo();\n\n      return (\n        <div>\n            <h1>{patientInfo?.name} <Icon name={(patientInfo && patientInfo.gender === 'male') ? 'venus':'mars'}></Icon></h1>\n            ssn: {patientInfo?.ssn}<br/>\n            Occupation: {patientInfo?.occupation}<br/>\n            Date of Birth: {patientInfo?.dateOfBirth}<br/>\n\n            <div><h3>entries</h3></div><br/>\n            {patientInfo?.entries?.map(entry => <Entries entry={entry} diagnosisInfo={diagnosisInfo} key={entry.id}></Entries>)}\n        </div>\n    );\n};\n\nconst Entries = ({entry, diagnosisInfo}: {entry : Entry, diagnosisInfo: Diagnosis[]}) => {\n    const codes: Array<string> = [];\n    if(entry.diagnosisCodes !== null){\n        const diagCodes = entry.diagnosisCodes!;\n        if(diagCodes && diagCodes.length > 0){\n            diagCodes.map(code => codes.push(code));\n        }\n    }\n    let i = 0;\n\n    const getDiagnosisName = (code: string) => {\n        const diagObj = diagnosisInfo.find(diagnosis => diagnosis.code === code);\n        if(diagObj){\n            return diagObj.name;\n        }else{\n            return '';\n        }\n    };\n    \n    // if(entry.type === 'Hospital'){\n    //     return(\n    //         <div>\n    //             <p>{entry.date} <i>{entry.description}</i></p>\n    //             <ul>\n    //             {codes.map(code => <li key={i++}>{code}</li>)}\n    //             </ul>\n    //         </div>\n    //     );\n    // }\n    \n    return (\n        <div>\n            <p>{entry.date} <i>{entry.description}</i></p>\n            <ul>\n            {codes.map(code => <li key={i++}>{code} {getDiagnosisName(code)}</li>)}\n            </ul>\n        </div>\n    );\n};\n\nexport default PatientInfoPage;"]},"metadata":{},"sourceType":"module"}